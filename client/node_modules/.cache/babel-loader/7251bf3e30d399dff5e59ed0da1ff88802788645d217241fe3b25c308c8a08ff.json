{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// API 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 (필요시 인증 토큰 추가)\napi.interceptors.request.use(config => {\n  // 인증 토큰 추가\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 (에러 처리)\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const chatService = {\n  // 채팅방 관련\n  async getChatRooms(userId) {\n    try {\n      const response = await api.get(`/chat-rooms/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching chat rooms:', error);\n      throw error;\n    }\n  },\n  async createChatRoom(userId, title) {\n    try {\n      const response = await api.post('/chat-rooms', {\n        userId,\n        title: title || '새로운 채팅'\n      });\n\n      // 생성된 채팅방 정보 반환\n      if (response.data.id) {\n        // 생성된 채팅방의 전체 정보를 가져옴\n        const chatRoom = await this.getChatRoom(response.data.id);\n        return chatRoom;\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error creating chat room:', error);\n      throw error;\n    }\n  },\n  async getChatRoom(chatRoomId) {\n    try {\n      const response = await api.get(`/chat-rooms/${chatRoomId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching chat room:', error);\n      throw error;\n    }\n  },\n  async updateChatRoomTitle(chatRoomId, title) {\n    try {\n      const response = await api.put(`/chat-rooms/${chatRoomId}`, {\n        title\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating chat room:', error);\n      throw error;\n    }\n  },\n  async deleteChatRoom(chatRoomId) {\n    try {\n      const response = await api.delete(`/chat-rooms/${chatRoomId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting chat room:', error);\n      throw error;\n    }\n  },\n  // 메시지 관련\n  async getMessages(chatRoomId, limit = 100, offset = 0) {\n    try {\n      const response = await api.get(`/messages/chat-room/${chatRoomId}`, {\n        params: {\n          limit,\n          offset\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      throw error;\n    }\n  },\n  async sendMessage(chatRoomId, content) {\n    try {\n      const response = await api.post('/messages', {\n        chat_room_id: chatRoomId,\n        content: content.trim()\n      });\n\n      // 백엔드는 userMessage와 botMessage를 포함한 객체를 반환\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  },\n  async deleteMessage(messageId) {\n    try {\n      const response = await api.delete(`/messages/${messageId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting message:', error);\n      throw error;\n    }\n  },\n  // 도움말 가져오기 (추가 기능)\n  async getHelp() {\n    try {\n      const response = await api.get('/messages/help');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting help:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","console","data","message","chatService","getChatRooms","userId","get","createChatRoom","title","post","id","chatRoom","getChatRoom","chatRoomId","updateChatRoomTitle","put","deleteChatRoom","delete","getMessages","limit","offset","params","sendMessage","content","chat_room_id","trim","deleteMessage","messageId","getHelp"],"sources":["/Users/songtaeho/Documents/GitHub/pinecone_chat/client/src/services/chatService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// API 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터 (필요시 인증 토큰 추가)\napi.interceptors.request.use(\n  (config) => {\n    // 인증 토큰 추가\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터 (에러 처리)\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nexport const chatService = {\n  // 채팅방 관련\n  async getChatRooms(userId) {\n    try {\n      const response = await api.get(`/chat-rooms/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching chat rooms:', error);\n      throw error;\n    }\n  },\n\n  async createChatRoom(userId, title) {\n    try {\n      const response = await api.post('/chat-rooms', {\n        userId,\n        title: title || '새로운 채팅'\n      });\n      \n      // 생성된 채팅방 정보 반환\n      if (response.data.id) {\n        // 생성된 채팅방의 전체 정보를 가져옴\n        const chatRoom = await this.getChatRoom(response.data.id);\n        return chatRoom;\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error creating chat room:', error);\n      throw error;\n    }\n  },\n\n  async getChatRoom(chatRoomId) {\n    try {\n      const response = await api.get(`/chat-rooms/${chatRoomId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching chat room:', error);\n      throw error;\n    }\n  },\n\n  async updateChatRoomTitle(chatRoomId, title) {\n    try {\n      const response = await api.put(`/chat-rooms/${chatRoomId}`, { title });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating chat room:', error);\n      throw error;\n    }\n  },\n\n  async deleteChatRoom(chatRoomId) {\n    try {\n      const response = await api.delete(`/chat-rooms/${chatRoomId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting chat room:', error);\n      throw error;\n    }\n  },\n\n  // 메시지 관련\n  async getMessages(chatRoomId, limit = 100, offset = 0) {\n    try {\n      const response = await api.get(`/messages/chat-room/${chatRoomId}`, {\n        params: { limit, offset }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      throw error;\n    }\n  },\n\n  async sendMessage(chatRoomId, content) {\n    try {\n      const response = await api.post('/messages', {\n        chat_room_id: chatRoomId,\n        content: content.trim()\n      });\n      \n      // 백엔드는 userMessage와 botMessage를 포함한 객체를 반환\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  },\n\n  async deleteMessage(messageId) {\n    try {\n      const response = await api.delete(`/messages/${messageId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting message:', error);\n      throw error;\n    }\n  },\n\n  // 도움말 가져오기 (추가 기능)\n  async getHelp() {\n    try {\n      const response = await api.get('/messages/help');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting help:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}