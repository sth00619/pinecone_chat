{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\song\\\\Documents\\\\GitHub\\\\seoultech_chat\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer, useEffect, useCallback } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_USER':\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: !!action.payload,\n        loading: false\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false\n      };\n    default:\n      return state;\n  }\n};\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // 앱 시작시 로컬스토리지에서 사용자 정보 확인\n  useEffect(() => {\n    const checkAuth = () => {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const savedUser = authService.getCurrentUser();\n      const isAuth = authService.isAuthenticated();\n      if (savedUser && isAuth) {\n        dispatch({\n          type: 'SET_USER',\n          payload: savedUser\n        });\n      } else {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // login 함수 수정\n  const login = useCallback(async (email, password) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const response = await authService.login(email, password);\n      console.log('AuthContext - Login response:', response); // 디버깅\n\n      if (response.user && response.token) {\n        // 토큰이 제대로 저장되었는지 확인\n        const savedToken = localStorage.getItem('token');\n        console.log('AuthContext - Token saved:', savedToken ? 'Yes' : 'No');\n        dispatch({\n          type: 'SET_USER',\n          payload: response.user\n        });\n        return response;\n      } else {\n        throw new Error('Invalid response from server');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || '로그인에 실패했습니다.';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      throw error;\n    }\n  }, []);\n\n  // 회원가입\n  const register = useCallback(async userData => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const response = await authService.register(userData);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return response;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message || '회원가입에 실패했습니다.';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      throw error;\n    }\n  }, []);\n\n  // 로그아웃\n  const logout = useCallback(() => {\n    authService.logout();\n    dispatch({\n      type: 'LOGOUT'\n    });\n  }, []);\n  const clearError = useCallback(() => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  }, []);\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"KtnZolyAEPFElPgnviu4t+XofbY=\");\n_c = AuthProvider;\nexport { AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useEffect","useCallback","authService","jsxDEV","_jsxDEV","AuthContext","authReducer","state","action","type","loading","payload","user","isAuthenticated","error","initialState","AuthProvider","children","_s","dispatch","checkAuth","savedUser","getCurrentUser","isAuth","login","email","password","response","console","log","token","savedToken","localStorage","getItem","Error","_error$response","_error$response$data","errorMessage","data","message","register","userData","_error$response2","_error$response2$data","logout","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/song/Documents/GitHub/seoultech_chat/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useReducer, useEffect, useCallback } from 'react';\r\nimport { authService } from '../services/authService';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'SET_USER':\r\n      return { ...state, user: action.payload, isAuthenticated: !!action.payload, loading: false };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload, loading: false };\r\n    case 'CLEAR_ERROR':\r\n      return { ...state, error: null };\r\n    case 'LOGOUT':\r\n      return { ...state, user: null, isAuthenticated: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  user: null,\r\n  isAuthenticated: false,\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // 앱 시작시 로컬스토리지에서 사용자 정보 확인\r\n  useEffect(() => {\r\n    const checkAuth = () => {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      \r\n      const savedUser = authService.getCurrentUser();\r\n      const isAuth = authService.isAuthenticated();\r\n      \r\n      if (savedUser && isAuth) {\r\n        dispatch({ type: 'SET_USER', payload: savedUser });\r\n      } else {\r\n        dispatch({ type: 'SET_LOADING', payload: false });\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  // login 함수 수정\r\n  const login = useCallback(async (email, password) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      dispatch({ type: 'CLEAR_ERROR' });\r\n      \r\n      const response = await authService.login(email, password);\r\n      \r\n      console.log('AuthContext - Login response:', response); // 디버깅\r\n      \r\n      if (response.user && response.token) {\r\n        // 토큰이 제대로 저장되었는지 확인\r\n        const savedToken = localStorage.getItem('token');\r\n        console.log('AuthContext - Token saved:', savedToken ? 'Yes' : 'No');\r\n        \r\n        dispatch({ type: 'SET_USER', payload: response.user });\r\n        return response;\r\n      } else {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || error.message || '로그인에 실패했습니다.';\r\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  // 회원가입\r\n  const register = useCallback(async (userData) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      dispatch({ type: 'CLEAR_ERROR' });\r\n      \r\n      const response = await authService.register(userData);\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || error.message || '회원가입에 실패했습니다.';\r\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  // 로그아웃\r\n  const logout = useCallback(() => {\r\n    authService.logout();\r\n    dispatch({ type: 'LOGOUT' });\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  }, []);\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}