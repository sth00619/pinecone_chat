{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 - 토큰 만료 시 자동 갱신\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    if (error.response.data.code === 'TOKEN_EXPIRED') {\n      originalRequest._retry = true;\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        const response = await api.post('/auth/refresh', {\n          refreshToken\n        });\n        localStorage.setItem('token', response.data.accessToken);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        originalRequest.headers.Authorization = `Bearer ${response.data.accessToken}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        authService.logout();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n  }\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    authService.logout();\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        localStorage.setItem('isAuthenticated', 'true');\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        error: error.message\n      };\n    }\n  },\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', {\n        email: userData.email,\n        username: userData.username,\n        password: userData.password\n      });\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        localStorage.setItem('isAuthenticated', 'true');\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        error: error.message\n      };\n    }\n  },\n  async refreshToken() {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) throw new Error('No refresh token');\n    try {\n      const response = await api.post('/auth/refresh', {\n        refreshToken\n      });\n      localStorage.setItem('token', response.data.accessToken);\n      localStorage.setItem('refreshToken', response.data.refreshToken);\n      return response.data;\n    } catch (error) {\n      this.logout();\n      throw error;\n    }\n  },\n  async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data.user;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n        error: error.message\n      };\n    }\n  },\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  getToken() {\n    return localStorage.getItem('token');\n  },\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp > Date.now() / 1000;\n    } catch {\n      return false;\n    }\n  },\n  logout() {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('isAuthenticated');\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","originalRequest","status","_retry","data","code","refreshToken","post","setItem","accessToken","refreshError","authService","logout","window","location","href","login","email","password","JSON","stringify","user","_error$response3","message","register","userData","username","_error$response4","Error","getCurrentUser","get","_error$response5","userStr","parse","getToken","isAuthenticated","payload","atob","split","exp","Date","now","removeItem"],"sources":["C:/Users/song/Documents/GitHub/seoultech_chat/client/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 요청 인터셉터\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 응답 인터셉터 - 토큰 만료 시 자동 갱신\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      if (error.response.data.code === 'TOKEN_EXPIRED') {\r\n        originalRequest._retry = true;\r\n        \r\n        try {\r\n          const refreshToken = localStorage.getItem('refreshToken');\r\n          const response = await api.post('/auth/refresh', { refreshToken });\r\n          \r\n          localStorage.setItem('token', response.data.accessToken);\r\n          localStorage.setItem('refreshToken', response.data.refreshToken);\r\n          \r\n          originalRequest.headers.Authorization = `Bearer ${response.data.accessToken}`;\r\n          return api(originalRequest);\r\n          \r\n        } catch (refreshError) {\r\n          authService.logout();\r\n          window.location.href = '/login';\r\n          return Promise.reject(refreshError);\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (error.response?.status === 401) {\r\n      authService.logout();\r\n      window.location.href = '/login';\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  async login(email, password) {\r\n    try {\r\n      const response = await api.post('/auth/login', { email, password });\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        localStorage.setItem('refreshToken', response.data.refreshToken);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n        localStorage.setItem('isAuthenticated', 'true');\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { error: error.message };\r\n    }\r\n  },\r\n\r\n  async register(userData) {\r\n    try {\r\n      const response = await api.post('/auth/register', {\r\n        email: userData.email,\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        localStorage.setItem('refreshToken', response.data.refreshToken);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n        localStorage.setItem('isAuthenticated', 'true');\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { error: error.message };\r\n    }\r\n  },\r\n\r\n  async refreshToken() {\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    if (!refreshToken) throw new Error('No refresh token');\r\n    \r\n    try {\r\n      const response = await api.post('/auth/refresh', { refreshToken });\r\n      \r\n      localStorage.setItem('token', response.data.accessToken);\r\n      localStorage.setItem('refreshToken', response.data.refreshToken);\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      this.logout();\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getCurrentUser() {\r\n    try {\r\n      const response = await api.get('/auth/me');\r\n      return response.data.user;\r\n    } catch (error) {\r\n      throw error.response?.data || { error: error.message };\r\n    }\r\n  },\r\n\r\n  getCurrentUser() {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  },\r\n\r\n  getToken() {\r\n    return localStorage.getItem('token');\r\n  },\r\n\r\n  isAuthenticated() {\r\n    const token = this.getToken();\r\n    if (!token) return false;\r\n    \r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      return payload.exp > Date.now() / 1000;\r\n    } catch {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  logout() {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('isAuthenticated');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}