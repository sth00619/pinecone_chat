{"ast":null,"code":"var _jsxFileName = \"/Users/songtaeho/Documents/GitHub/pinecone_chat/client/src/contexts/ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useCallback } from 'react';\nimport { chatService } from '../services/chatService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nconst chatReducer = (state, action) => {\n  // 안전한 배열 접근을 위한 헬퍼 함수\n  const ensureArray = value => Array.isArray(value) ? value : [];\n\n  // 현재 상태의 배열들이 유효한지 확인\n  const safeChatRooms = ensureArray(state.chatRooms);\n  const safeMessages = ensureArray(state.messages);\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'SET_CHAT_ROOMS':\n      // action.payload가 배열인지 확인\n      const newChatRooms = ensureArray(action.payload);\n      return {\n        ...state,\n        chatRooms: newChatRooms\n      };\n    case 'ADD_CHAT_ROOM':\n      // action.payload가 유효한 객체인지 확인\n      if (!action.payload || typeof action.payload !== 'object') {\n        console.warn('Invalid chat room payload:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        chatRooms: [action.payload, ...safeChatRooms]\n      };\n    case 'UPDATE_CHAT_ROOM':\n      if (!action.payload || !action.payload.id) {\n        console.warn('Invalid update chat room payload:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        chatRooms: safeChatRooms.map(room => room && room.id === action.payload.id ? action.payload : room)\n      };\n    case 'DELETE_CHAT_ROOM':\n      if (!action.payload) {\n        console.warn('Invalid delete chat room payload:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        chatRooms: safeChatRooms.filter(room => room && room.id !== action.payload)\n      };\n    case 'SET_CURRENT_CHAT_ROOM':\n      return {\n        ...state,\n        currentChatRoom: action.payload,\n        messages: [] // 새 채팅방 선택 시 메시지 초기화\n      };\n    case 'SET_MESSAGES':\n      // action.payload가 배열인지 확인\n      const newMessages = ensureArray(action.payload);\n      return {\n        ...state,\n        messages: newMessages\n      };\n    case 'ADD_MESSAGE':\n      // action.payload가 유효한 메시지 객체인지 확인\n      if (!action.payload || typeof action.payload !== 'object') {\n        console.warn('Invalid message payload:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        messages: [...safeMessages, action.payload]\n      };\n    case 'ADD_MESSAGES':\n      // action.payload가 배열인지 확인\n      const messagesToAdd = ensureArray(action.payload);\n      return {\n        ...state,\n        messages: [...safeMessages, ...messagesToAdd]\n      };\n    case 'DELETE_MESSAGE':\n      if (!action.payload) {\n        console.warn('Invalid delete message payload:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        messages: safeMessages.filter(msg => msg && msg.id !== action.payload)\n      };\n    case 'RESET_STATE':\n      return initialState;\n    default:\n      console.warn('Unknown action type:', action.type);\n      return state;\n  }\n};\nconst initialState = {\n  chatRooms: [],\n  currentChatRoom: null,\n  messages: [],\n  loading: false,\n  error: null\n};\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // 상태 안전성 보장\n  const safeState = {\n    ...state,\n    chatRooms: Array.isArray(state.chatRooms) ? state.chatRooms : [],\n    messages: Array.isArray(state.messages) ? state.messages : []\n  };\n  const handleError = useCallback((error, defaultMessage) => {\n    var _error$response, _error$response$data;\n    console.error('Chat error:', error);\n    const message = (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || (error === null || error === void 0 ? void 0 : error.message) || defaultMessage;\n    dispatch({\n      type: 'SET_ERROR',\n      payload: message\n    });\n  }, []);\n\n  // 채팅방 관련 액션들\n  const loadChatRooms = useCallback(async userId => {\n    if (!userId) {\n      console.warn('loadChatRooms: userId is required');\n      return;\n    }\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const chatRooms = await chatService.getChatRooms(userId);\n      dispatch({\n        type: 'SET_CHAT_ROOMS',\n        payload: chatRooms\n      });\n    } catch (error) {\n      handleError(error, '채팅방 목록을 불러오는데 실패했습니다.');\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, [handleError]);\n  const createChatRoom = useCallback(async (userId, title) => {\n    if (!userId) {\n      handleError(new Error('로그인이 필요합니다.'), '로그인이 필요합니다.');\n      return null;\n    }\n    if (!title || typeof title !== 'string' || title.trim() === '') {\n      handleError(new Error('채팅방 제목이 필요합니다.'), '채팅방 제목이 필요합니다.');\n      return null;\n    }\n    try {\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const newChatRoom = await chatService.createChatRoom(userId, title.trim());\n      if (newChatRoom && typeof newChatRoom === 'object') {\n        dispatch({\n          type: 'ADD_CHAT_ROOM',\n          payload: newChatRoom\n        });\n        return newChatRoom;\n      } else {\n        throw new Error('Invalid chat room response');\n      }\n    } catch (error) {\n      handleError(error, '채팅방 생성에 실패했습니다.');\n      throw error;\n    }\n  }, [handleError]);\n  const updateChatRoomTitle = useCallback(async (chatRoomId, title) => {\n    if (!chatRoomId) {\n      handleError(new Error('채팅방 ID가 필요합니다.'), '채팅방 ID가 필요합니다.');\n      return;\n    }\n    if (!title || typeof title !== 'string' || title.trim() === '') {\n      handleError(new Error('채팅방 제목이 필요합니다.'), '채팅방 제목이 필요합니다.');\n      return;\n    }\n    try {\n      var _safeState$currentCha;\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      await chatService.updateChatRoomTitle(chatRoomId, title.trim());\n      const updatedRoom = {\n        ...safeState.currentChatRoom,\n        title: title.trim()\n      };\n      dispatch({\n        type: 'UPDATE_CHAT_ROOM',\n        payload: updatedRoom\n      });\n      if (((_safeState$currentCha = safeState.currentChatRoom) === null || _safeState$currentCha === void 0 ? void 0 : _safeState$currentCha.id) === chatRoomId) {\n        dispatch({\n          type: 'SET_CURRENT_CHAT_ROOM',\n          payload: updatedRoom\n        });\n      }\n    } catch (error) {\n      handleError(error, '채팅방 제목 변경에 실패했습니다.');\n    }\n  }, [safeState.currentChatRoom, handleError]);\n  const deleteChatRoom = useCallback(async chatRoomId => {\n    if (!chatRoomId) {\n      handleError(new Error('채팅방 ID가 필요합니다.'), '채팅방 ID가 필요합니다.');\n      return;\n    }\n    try {\n      var _safeState$currentCha2;\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      await chatService.deleteChatRoom(chatRoomId);\n      dispatch({\n        type: 'DELETE_CHAT_ROOM',\n        payload: chatRoomId\n      });\n      if (((_safeState$currentCha2 = safeState.currentChatRoom) === null || _safeState$currentCha2 === void 0 ? void 0 : _safeState$currentCha2.id) === chatRoomId) {\n        dispatch({\n          type: 'SET_CURRENT_CHAT_ROOM',\n          payload: null\n        });\n      }\n    } catch (error) {\n      handleError(error, '채팅방 삭제에 실패했습니다.');\n    }\n  }, [safeState.currentChatRoom, handleError]);\n  const selectChatRoom = useCallback(async chatRoom => {\n    if (!chatRoom || !chatRoom.id) {\n      handleError(new Error('유효하지 않은 채팅방입니다.'), '유효하지 않은 채팅방입니다.');\n      return;\n    }\n    try {\n      dispatch({\n        type: 'SET_CURRENT_CHAT_ROOM',\n        payload: chatRoom\n      });\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const messages = await chatService.getMessages(chatRoom.id);\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: messages\n      });\n    } catch (error) {\n      handleError(error, '메시지를 불러오는데 실패했습니다.');\n      // 오류 발생 시 빈 메시지 배열로 설정\n      dispatch({\n        type: 'SET_MESSAGES',\n        payload: []\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, [handleError]);\n\n  // 메시지 관련 액션들\n  const sendMessage = useCallback(async content => {\n    if (!safeState.currentChatRoom) {\n      handleError(new Error('채팅방을 선택해주세요.'), '채팅방을 선택해주세요.');\n      return null;\n    }\n    if (!content || typeof content !== 'string' || content.trim() === '') {\n      handleError(new Error('메시지 내용이 필요합니다.'), '메시지 내용이 필요합니다.');\n      return null;\n    }\n    try {\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const response = await chatService.sendMessage(safeState.currentChatRoom.id, content.trim());\n\n      // 응답 유효성 검사\n      if (response && response.userMessage && response.botMessage) {\n        dispatch({\n          type: 'ADD_MESSAGE',\n          payload: response.userMessage\n        });\n        dispatch({\n          type: 'ADD_MESSAGE',\n          payload: response.botMessage\n        });\n\n        // 채팅방 목록의 마지막 메시지 업데이트\n        if (response.botMessage.content) {\n          const updatedRoom = {\n            ...safeState.currentChatRoom,\n            last_message: response.botMessage.content.substring(0, 50) + (response.botMessage.content.length > 50 ? '...' : ''),\n            updated_at: new Date().toISOString()\n          };\n          dispatch({\n            type: 'UPDATE_CHAT_ROOM',\n            payload: updatedRoom\n          });\n        }\n        return response;\n      } else {\n        throw new Error('Invalid message response format');\n      }\n    } catch (error) {\n      handleError(error, '메시지 전송에 실패했습니다.');\n      throw error;\n    }\n  }, [safeState.currentChatRoom, handleError]);\n  const deleteMessage = useCallback(async messageId => {\n    if (!messageId) {\n      handleError(new Error('메시지 ID가 필요합니다.'), '메시지 ID가 필요합니다.');\n      return;\n    }\n    try {\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      await chatService.deleteMessage(messageId);\n      dispatch({\n        type: 'DELETE_MESSAGE',\n        payload: messageId\n      });\n    } catch (error) {\n      handleError(error, '메시지 삭제에 실패했습니다.');\n    }\n  }, [handleError]);\n  const clearError = useCallback(() => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  }, []);\n  const resetState = useCallback(() => {\n    dispatch({\n      type: 'RESET_STATE'\n    });\n  }, []);\n\n  // 디버깅을 위한 상태 로깅 (개발 환경에서만)\n  if (process.env.NODE_ENV === 'development') {\n    var _safeState$currentCha3;\n    console.log('ChatContext state:', {\n      chatRoomsCount: safeState.chatRooms.length,\n      messagesCount: safeState.messages.length,\n      currentChatRoom: (_safeState$currentCha3 = safeState.currentChatRoom) === null || _safeState$currentCha3 === void 0 ? void 0 : _safeState$currentCha3.id,\n      loading: safeState.loading,\n      error: safeState.error\n    });\n  }\n  const value = {\n    ...safeState,\n    loadChatRooms,\n    createChatRoom,\n    updateChatRoomTitle,\n    deleteChatRoom,\n    selectChatRoom,\n    sendMessage,\n    deleteMessage,\n    clearError,\n    resetState\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"XWn5O+YgZNd78MH8dTVel7CNzxc=\");\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { ChatContext };\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useCallback","chatService","jsxDEV","_jsxDEV","ChatContext","chatReducer","state","action","ensureArray","value","Array","isArray","safeChatRooms","chatRooms","safeMessages","messages","type","loading","payload","error","newChatRooms","console","warn","id","map","room","filter","currentChatRoom","newMessages","messagesToAdd","msg","initialState","ChatProvider","children","_s","dispatch","safeState","handleError","defaultMessage","_error$response","_error$response$data","message","response","data","loadChatRooms","userId","getChatRooms","createChatRoom","title","Error","trim","newChatRoom","updateChatRoomTitle","chatRoomId","_safeState$currentCha","updatedRoom","deleteChatRoom","_safeState$currentCha2","selectChatRoom","chatRoom","getMessages","sendMessage","content","userMessage","botMessage","last_message","substring","length","updated_at","Date","toISOString","deleteMessage","messageId","clearError","resetState","process","env","NODE_ENV","_safeState$currentCha3","log","chatRoomsCount","messagesCount","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","$RefreshReg$"],"sources":["/Users/songtaeho/Documents/GitHub/pinecone_chat/client/src/contexts/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useCallback } from 'react';\nimport { chatService } from '../services/chatService';\n\nconst ChatContext = createContext();\n\nconst chatReducer = (state, action) => {\n  // 안전한 배열 접근을 위한 헬퍼 함수\n  const ensureArray = (value) => Array.isArray(value) ? value : [];\n  \n  // 현재 상태의 배열들이 유효한지 확인\n  const safeChatRooms = ensureArray(state.chatRooms);\n  const safeMessages = ensureArray(state.messages);\n  \n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n      \n    case 'SET_ERROR':\n      return { ...state, error: action.payload, loading: false };\n      \n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n      \n    case 'SET_CHAT_ROOMS':\n      // action.payload가 배열인지 확인\n      const newChatRooms = ensureArray(action.payload);\n      return { ...state, chatRooms: newChatRooms };\n      \n    case 'ADD_CHAT_ROOM':\n      // action.payload가 유효한 객체인지 확인\n      if (!action.payload || typeof action.payload !== 'object') {\n        console.warn('Invalid chat room payload:', action.payload);\n        return state;\n      }\n      return { ...state, chatRooms: [action.payload, ...safeChatRooms] };\n      \n    case 'UPDATE_CHAT_ROOM':\n      if (!action.payload || !action.payload.id) {\n        console.warn('Invalid update chat room payload:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        chatRooms: safeChatRooms.map(room =>\n          room && room.id === action.payload.id ? action.payload : room\n        )\n      };\n      \n    case 'DELETE_CHAT_ROOM':\n      if (!action.payload) {\n        console.warn('Invalid delete chat room payload:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        chatRooms: safeChatRooms.filter(room => room && room.id !== action.payload)\n      };\n      \n    case 'SET_CURRENT_CHAT_ROOM':\n      return { \n        ...state, \n        currentChatRoom: action.payload, \n        messages: [] // 새 채팅방 선택 시 메시지 초기화\n      };\n      \n    case 'SET_MESSAGES':\n      // action.payload가 배열인지 확인\n      const newMessages = ensureArray(action.payload);\n      return { ...state, messages: newMessages };\n      \n    case 'ADD_MESSAGE':\n      // action.payload가 유효한 메시지 객체인지 확인\n      if (!action.payload || typeof action.payload !== 'object') {\n        console.warn('Invalid message payload:', action.payload);\n        return state;\n      }\n      return { ...state, messages: [...safeMessages, action.payload] };\n      \n    case 'ADD_MESSAGES':\n      // action.payload가 배열인지 확인\n      const messagesToAdd = ensureArray(action.payload);\n      return { ...state, messages: [...safeMessages, ...messagesToAdd] };\n      \n    case 'DELETE_MESSAGE':\n      if (!action.payload) {\n        console.warn('Invalid delete message payload:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        messages: safeMessages.filter(msg => msg && msg.id !== action.payload)\n      };\n      \n    case 'RESET_STATE':\n      return initialState;\n      \n    default:\n      console.warn('Unknown action type:', action.type);\n      return state;\n  }\n};\n\nconst initialState = {\n  chatRooms: [],\n  currentChatRoom: null,\n  messages: [],\n  loading: false,\n  error: null\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // 상태 안전성 보장\n  const safeState = {\n    ...state,\n    chatRooms: Array.isArray(state.chatRooms) ? state.chatRooms : [],\n    messages: Array.isArray(state.messages) ? state.messages : []\n  };\n\n  const handleError = useCallback((error, defaultMessage) => {\n    console.error('Chat error:', error);\n    const message = error?.response?.data?.error || error?.message || defaultMessage;\n    dispatch({ type: 'SET_ERROR', payload: message });\n  }, []);\n\n  // 채팅방 관련 액션들\n  const loadChatRooms = useCallback(async (userId) => {\n    if (!userId) {\n      console.warn('loadChatRooms: userId is required');\n      return;\n    }\n    \n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n      \n      const chatRooms = await chatService.getChatRooms(userId);\n      dispatch({ type: 'SET_CHAT_ROOMS', payload: chatRooms });\n    } catch (error) {\n      handleError(error, '채팅방 목록을 불러오는데 실패했습니다.');\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, [handleError]);\n\n  const createChatRoom = useCallback(async (userId, title) => {\n    if (!userId) {\n      handleError(new Error('로그인이 필요합니다.'), '로그인이 필요합니다.');\n      return null;\n    }\n    \n    if (!title || typeof title !== 'string' || title.trim() === '') {\n      handleError(new Error('채팅방 제목이 필요합니다.'), '채팅방 제목이 필요합니다.');\n      return null;\n    }\n    \n    try {\n      dispatch({ type: 'CLEAR_ERROR' });\n      const newChatRoom = await chatService.createChatRoom(userId, title.trim());\n      \n      if (newChatRoom && typeof newChatRoom === 'object') {\n        dispatch({ type: 'ADD_CHAT_ROOM', payload: newChatRoom });\n        return newChatRoom;\n      } else {\n        throw new Error('Invalid chat room response');\n      }\n    } catch (error) {\n      handleError(error, '채팅방 생성에 실패했습니다.');\n      throw error;\n    }\n  }, [handleError]);\n\n  const updateChatRoomTitle = useCallback(async (chatRoomId, title) => {\n    if (!chatRoomId) {\n      handleError(new Error('채팅방 ID가 필요합니다.'), '채팅방 ID가 필요합니다.');\n      return;\n    }\n    \n    if (!title || typeof title !== 'string' || title.trim() === '') {\n      handleError(new Error('채팅방 제목이 필요합니다.'), '채팅방 제목이 필요합니다.');\n      return;\n    }\n    \n    try {\n      dispatch({ type: 'CLEAR_ERROR' });\n      await chatService.updateChatRoomTitle(chatRoomId, title.trim());\n      \n      const updatedRoom = { ...safeState.currentChatRoom, title: title.trim() };\n      dispatch({ type: 'UPDATE_CHAT_ROOM', payload: updatedRoom });\n      \n      if (safeState.currentChatRoom?.id === chatRoomId) {\n        dispatch({ type: 'SET_CURRENT_CHAT_ROOM', payload: updatedRoom });\n      }\n    } catch (error) {\n      handleError(error, '채팅방 제목 변경에 실패했습니다.');\n    }\n  }, [safeState.currentChatRoom, handleError]);\n\n  const deleteChatRoom = useCallback(async (chatRoomId) => {\n    if (!chatRoomId) {\n      handleError(new Error('채팅방 ID가 필요합니다.'), '채팅방 ID가 필요합니다.');\n      return;\n    }\n    \n    try {\n      dispatch({ type: 'CLEAR_ERROR' });\n      await chatService.deleteChatRoom(chatRoomId);\n      dispatch({ type: 'DELETE_CHAT_ROOM', payload: chatRoomId });\n      \n      if (safeState.currentChatRoom?.id === chatRoomId) {\n        dispatch({ type: 'SET_CURRENT_CHAT_ROOM', payload: null });\n      }\n    } catch (error) {\n      handleError(error, '채팅방 삭제에 실패했습니다.');\n    }\n  }, [safeState.currentChatRoom, handleError]);\n\n  const selectChatRoom = useCallback(async (chatRoom) => {\n    if (!chatRoom || !chatRoom.id) {\n      handleError(new Error('유효하지 않은 채팅방입니다.'), '유효하지 않은 채팅방입니다.');\n      return;\n    }\n    \n    try {\n      dispatch({ type: 'SET_CURRENT_CHAT_ROOM', payload: chatRoom });\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n      \n      const messages = await chatService.getMessages(chatRoom.id);\n      dispatch({ type: 'SET_MESSAGES', payload: messages });\n    } catch (error) {\n      handleError(error, '메시지를 불러오는데 실패했습니다.');\n      // 오류 발생 시 빈 메시지 배열로 설정\n      dispatch({ type: 'SET_MESSAGES', payload: [] });\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, [handleError]);\n\n  // 메시지 관련 액션들\n  const sendMessage = useCallback(async (content) => {\n    if (!safeState.currentChatRoom) {\n      handleError(new Error('채팅방을 선택해주세요.'), '채팅방을 선택해주세요.');\n      return null;\n    }\n\n    if (!content || typeof content !== 'string' || content.trim() === '') {\n      handleError(new Error('메시지 내용이 필요합니다.'), '메시지 내용이 필요합니다.');\n      return null;\n    }\n\n    try {\n      dispatch({ type: 'CLEAR_ERROR' });\n      const response = await chatService.sendMessage(safeState.currentChatRoom.id, content.trim());\n      \n      // 응답 유효성 검사\n      if (response && response.userMessage && response.botMessage) {\n        dispatch({ type: 'ADD_MESSAGE', payload: response.userMessage });\n        dispatch({ type: 'ADD_MESSAGE', payload: response.botMessage });\n        \n        // 채팅방 목록의 마지막 메시지 업데이트\n        if (response.botMessage.content) {\n          const updatedRoom = {\n            ...safeState.currentChatRoom,\n            last_message: response.botMessage.content.substring(0, 50) + (response.botMessage.content.length > 50 ? '...' : ''),\n            updated_at: new Date().toISOString()\n          };\n          dispatch({ type: 'UPDATE_CHAT_ROOM', payload: updatedRoom });\n        }\n        \n        return response;\n      } else {\n        throw new Error('Invalid message response format');\n      }\n    } catch (error) {\n      handleError(error, '메시지 전송에 실패했습니다.');\n      throw error;\n    }\n  }, [safeState.currentChatRoom, handleError]);\n\n  const deleteMessage = useCallback(async (messageId) => {\n    if (!messageId) {\n      handleError(new Error('메시지 ID가 필요합니다.'), '메시지 ID가 필요합니다.');\n      return;\n    }\n    \n    try {\n      dispatch({ type: 'CLEAR_ERROR' });\n      await chatService.deleteMessage(messageId);\n      dispatch({ type: 'DELETE_MESSAGE', payload: messageId });\n    } catch (error) {\n      handleError(error, '메시지 삭제에 실패했습니다.');\n    }\n  }, [handleError]);\n\n  const clearError = useCallback(() => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  }, []);\n\n  const resetState = useCallback(() => {\n    dispatch({ type: 'RESET_STATE' });\n  }, []);\n\n  // 디버깅을 위한 상태 로깅 (개발 환경에서만)\n  if (process.env.NODE_ENV === 'development') {\n    console.log('ChatContext state:', {\n      chatRoomsCount: safeState.chatRooms.length,\n      messagesCount: safeState.messages.length,\n      currentChatRoom: safeState.currentChatRoom?.id,\n      loading: safeState.loading,\n      error: safeState.error\n    });\n  }\n\n  const value = {\n    ...safeState,\n    loadChatRooms,\n    createChatRoom,\n    updateChatRoomTitle,\n    deleteChatRoom,\n    selectChatRoom,\n    sendMessage,\n    deleteMessage,\n    clearError,\n    resetState\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\nexport { ChatContext };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}