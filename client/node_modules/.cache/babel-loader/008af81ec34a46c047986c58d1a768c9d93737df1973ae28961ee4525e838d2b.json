{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// API 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 - 토큰 추가\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 - 에러 처리\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // 인증 에러 시 로그인 페이지로\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const userService = {\n  async getUsers() {\n    const response = await api.get('/users');\n    return response.data;\n  },\n  async getUser(userId) {\n    const response = await api.get(`/users/${userId}`);\n    return response.data;\n  },\n  async createUser(userData) {\n    const response = await api.post('/users', userData);\n    return response.data;\n  },\n  async updateUser(userId, userData) {\n    const response = await api.put(`/users/${userId}`, userData);\n    return response.data;\n  },\n  async deleteUser(userId) {\n    const response = await api.delete(`/users/${userId}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","userService","getUsers","get","data","getUser","userId","createUser","userData","post","updateUser","put","deleteUser","delete"],"sources":["C:/Users/song/Documents/GitHub/pinecone_chat/client/src/services/userService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// API 인스턴스 생성\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 요청 인터셉터 - 토큰 추가\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 응답 인터셉터 - 에러 처리\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // 인증 에러 시 로그인 페이지로\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const userService = {\r\n  async getUsers() {\r\n    const response = await api.get('/users');\r\n    return response.data;\r\n  },\r\n\r\n  async getUser(userId) {\r\n    const response = await api.get(`/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  async createUser(userData) {\r\n    const response = await api.post('/users', userData);\r\n    return response.data;\r\n  },\r\n\r\n  async updateUser(userId, userData) {\r\n    const response = await api.put(`/users/${userId}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  async deleteUser(userId) {\r\n    const response = await api.delete(`/users/${userId}`);\r\n    return response.data;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMU,WAAW,GAAG;EACzB,MAAMC,QAAQA,CAAA,EAAG;IACf,MAAMR,QAAQ,GAAG,MAAMf,GAAG,CAACwB,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOT,QAAQ,CAACU,IAAI;EACtB,CAAC;EAED,MAAMC,OAAOA,CAACC,MAAM,EAAE;IACpB,MAAMZ,QAAQ,GAAG,MAAMf,GAAG,CAACwB,GAAG,CAAC,UAAUG,MAAM,EAAE,CAAC;IAClD,OAAOZ,QAAQ,CAACU,IAAI;EACtB,CAAC;EAED,MAAMG,UAAUA,CAACC,QAAQ,EAAE;IACzB,MAAMd,QAAQ,GAAG,MAAMf,GAAG,CAAC8B,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;IACnD,OAAOd,QAAQ,CAACU,IAAI;EACtB,CAAC;EAED,MAAMM,UAAUA,CAACJ,MAAM,EAAEE,QAAQ,EAAE;IACjC,MAAMd,QAAQ,GAAG,MAAMf,GAAG,CAACgC,GAAG,CAAC,UAAUL,MAAM,EAAE,EAAEE,QAAQ,CAAC;IAC5D,OAAOd,QAAQ,CAACU,IAAI;EACtB,CAAC;EAED,MAAMQ,UAAUA,CAACN,MAAM,EAAE;IACvB,MAAMZ,QAAQ,GAAG,MAAMf,GAAG,CAACkC,MAAM,CAAC,UAAUP,MAAM,EAAE,CAAC;IACrD,OAAOZ,QAAQ,CAACU,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}