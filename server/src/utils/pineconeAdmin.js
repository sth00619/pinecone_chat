const pineconeDao = require('../dao/pineconeDao');
const knowledgeDao = require('../dao/knowledgeDao');
require('dotenv').config();

/**
 * Pinecone Í¥ÄÎ¶¨ Ïú†Ìã∏Î¶¨Ìã∞
 * Ïª§Îß®ÎìúÎùºÏù∏ÏóêÏÑú Ïã§Ìñâ: node server/src/utils/pineconeAdmin.js [command]
 */

class PineconeAdmin {
  // Î°úÏª¨ DBÏóêÏÑú PineconeÏúºÎ°ú Ï†ÑÏ≤¥ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
  async migrateFromLocalDB() {
    console.log('üöÄ Starting migration from local DB to Pinecone...');
    
    try {
      const categories = await knowledgeDao.getAllCategories();
      let totalMigrated = 0;
      
      for (const category of categories) {
        console.log(`\nüìÅ Processing category: ${category.name}`);
        const items = await knowledgeDao.getByCategory(category.id);
        
        if (items.length > 0) {
          const pineconeItems = items.map(item => ({
            id: `local-${item.id}`, // Î°úÏª¨ DB ID Î≥¥Ï°¥
            question: item.question,
            answer: item.answer,
            keywords: item.keywords,
            category: category.name,
            priority: item.priority || 0,
            metadata: {
              originalId: item.id,
              source: 'localdb'
            }
          }));
          
          await pineconeDao.addKnowledgeBatch(pineconeItems);
          totalMigrated += items.length;
          console.log(`‚úÖ Migrated ${items.length} items from ${category.name}`);
        }
      }
      
      console.log(`\n‚ú® Migration completed! Total items migrated: ${totalMigrated}`);
    } catch (error) {
      console.error('‚ùå Migration failed:', error);
    }
  }

  // Pinecone Ïù∏Îç±Ïä§ ÌÜµÍ≥Ñ ÌôïÏù∏
  async checkStats() {
    console.log('üìä Fetching Pinecone index statistics...');
    
    try {
      const stats = await pineconeDao.getStats();
      console.log('\nüìà Index Statistics:');
      console.log(JSON.stringify(stats, null, 2));
    } catch (error) {
      console.error('‚ùå Failed to fetch stats:', error);
    }
  }

  // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
  async addSampleData() {
    console.log('üìù Adding sample data to Pinecone...');
    
    const sampleData = [
      {
        question: "ÏÑúÏö∏Í≥ºÌïôÍ∏∞Ïà†ÎåÄÌïôÍµêÎäî Ïñ∏Ï†ú ÏÑ§Î¶ΩÎêòÏóàÎÇòÏöî?",
        answer: "ÏÑúÏö∏Í≥ºÌïôÍ∏∞Ïà†ÎåÄÌïôÍµêÎäî 1910ÎÖÑ 4Ïõî 15Ïùº Í≥µÎ¶ΩÏñ¥ÏùòÎèôÏã§ÏóÖÎ≥¥ÏäµÌïôÍµêÎ°ú ÏÑ§Î¶ΩÎêòÏóàÏäµÎãàÎã§. Ïù¥ÌõÑ Ïó¨Îü¨ Ï∞®Î°Ä ÍµêÎ™Ö Î≥ÄÍ≤ΩÏùÑ Í±∞Ï≥ê 2010ÎÖÑÏóê ÌòÑÏû¨Ïùò ÏÑúÏö∏Í≥ºÌïôÍ∏∞Ïà†ÎåÄÌïôÍµêÎ°ú ÍµêÎ™ÖÏùÑ Î≥ÄÍ≤ΩÌñàÏäµÎãàÎã§.",
        keywords: "ÏÑ§Î¶Ω, Ïó≠ÏÇ¨, 1910ÎÖÑ, Í≥µÎ¶ΩÏñ¥ÏùòÎèôÏã§ÏóÖÎ≥¥ÏäµÌïôÍµê",
        category: "ÌïôÍµêÏÜåÍ∞ú",
        priority: 10
      },
      {
        question: "ÏÑúÏö∏Í≥ºÌïôÍ∏∞Ïà†ÎåÄÌïôÍµêÏùò Ï∫†ÌçºÏä§Îäî Ïñ¥ÎîîÏóê ÏûàÎÇòÏöî?",
        answer: "ÏÑúÏö∏Í≥ºÌïôÍ∏∞Ïà†ÎåÄÌïôÍµêÎäî ÏÑúÏö∏ÌäπÎ≥ÑÏãú ÎÖ∏ÏõêÍµ¨ Í≥µÎ¶âÎ°ú 232(Í≥µÎ¶âÎèô 172Î≤àÏßÄ)Ïóê ÏúÑÏπòÌïòÍ≥† ÏûàÏäµÎãàÎã§. ÏßÄÌïòÏ≤† 7Ìò∏ÏÑ† Í≥µÎ¶âÏó≠ÏóêÏÑú ÎèÑÎ≥¥Î°ú ÏïΩ 10Î∂Ñ Í±∞Î¶¨Ïóê ÏûàÏäµÎãàÎã§.",
        keywords: "ÏúÑÏπò, Ï£ºÏÜå, ÎÖ∏ÏõêÍµ¨, Í≥µÎ¶â, Ï∫†ÌçºÏä§",
        category: "ÌïôÍµêÏÜåÍ∞ú",
        priority: 9
      },
      {
        question: "ÌïôÍµê ÏÉÅÏßïÎ¨ºÏùÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?",
        answer: "ÏÑúÏö∏Í≥ºÌïôÍ∏∞Ïà†ÎåÄÌïôÍµêÏùò ÏÉÅÏßïÎèôÎ¨ºÏùÄ Ìò∏ÎûëÏù¥Ïù¥Î©∞, ÍµêÎ™©ÏùÄ ÎäêÌã∞ÎÇòÎ¨¥, ÍµêÌôîÎäî Î™©Î†®ÏûÖÎãàÎã§. UI Ïª¨Îü¨Îäî SEOULTECH BlueÏôÄ SEOULTECH GrayÏûÖÎãàÎã§.",
        keywords: "ÏÉÅÏßï, Ìò∏ÎûëÏù¥, ÎäêÌã∞ÎÇòÎ¨¥, Î™©Î†®, UI",
        category: "ÌïôÍµêÏÜåÍ∞ú",
        priority: 8
      }
    ];
    
    try {
      const ids = await pineconeDao.addKnowledgeBatch(sampleData);
      console.log(`‚úÖ Added ${ids.length} sample items to Pinecone`);
    } catch (error) {
      console.error('‚ùå Failed to add sample data:', error);
    }
  }

  // Í≤ÄÏÉâ ÌÖåÏä§Ìä∏
  async testSearch(query) {
    console.log(`üîç Testing search for: "${query}"`);
    
    try {
      const result = await pineconeDao.searchAnswer(query, 3);
      
      if (result) {
        console.log('\n‚úÖ Search Results:');
        console.log(`Score: ${result.score}`);
        console.log(`Question: ${result.question}`);
        console.log(`Answer: ${result.answer}`);
        console.log(`Category: ${result.category}`);
      } else {
        console.log('\n‚ùå No relevant results found');
      }
    } catch (error) {
      console.error('‚ùå Search failed:', error);
    }
  }

  // ÌäπÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Î™®Îì† Ìï≠Î™© Ï°∞Ìöå
  async listByCategory(category) {
    console.log(`üìÇ Listing all items in category: ${category}`);
    
    try {
      // ÏûÑÏùòÏùò ÏøºÎ¶¨Î°ú Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ÎßÅ Í≤ÄÏÉâ
      const results = await pineconeDao.searchByCategory("", category, 100);
      
      console.log(`\nüìã Found ${results.length} items:`);
      results.forEach((item, index) => {
        console.log(`\n${index + 1}. ${item.question}`);
        console.log(`   Answer: ${item.answer.substring(0, 100)}...`);
        console.log(`   Keywords: ${item.keywords}`);
      });
    } catch (error) {
      console.error('‚ùå Failed to list by category:', error);
    }
  }

  // Ïù∏Îç±Ïä§ Ï¥àÍ∏∞Ìôî (Ï£ºÏùò: Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú)
  async clearIndex() {
    console.log('‚ö†Ô∏è  WARNING: This will delete ALL data in the Pinecone index!');
    console.log('Press Ctrl+C to cancel, or wait 5 seconds to continue...');
    
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    try {
      // PineconeÏùÄ Ï†ÑÏ≤¥ ÏÇ≠Ï†ú APIÎ•º ÏßÅÏ†ë Ï†úÍ≥µÌïòÏßÄ ÏïäÏúºÎØÄÎ°ú
      // Î™®Îì† Î≤°ÌÑ∞Î•º Ï°∞ÌöåÌïú ÌõÑ ÏÇ≠Ï†úÌï¥Ïïº Ìï®
      const allItems = await pineconeDao.getAllKnowledge('', 1000);
      const ids = allItems.map(item => item.id);
      
      if (ids.length > 0) {
        await pineconeDao.deleteKnowledge(ids);
        console.log(`‚úÖ Deleted ${ids.length} items from Pinecone`);
      } else {
        console.log('‚ÑπÔ∏è  Index is already empty');
      }
    } catch (error) {
      console.error('‚ùå Failed to clear index:', error);
    }
  }
}

// CLI Ïã§Ìñâ
const admin = new PineconeAdmin();
const command = process.argv[2];
const args = process.argv.slice(3);

async function main() {
  switch (command) {
    case 'migrate':
      await admin.migrateFromLocalDB();
      break;
    case 'stats':
      await admin.checkStats();
      break;
    case 'sample':
      await admin.addSampleData();
      break;
    case 'search':
      if (args.length === 0) {
        console.log('Usage: node pineconeAdmin.js search "your query"');
        break;
      }
      await admin.testSearch(args.join(' '));
      break;
    case 'list':
      if (args.length === 0) {
        console.log('Usage: node pineconeAdmin.js list [category]');
        break;
      }
      await admin.listByCategory(args[0]);
      break;
    case 'clear':
      await admin.clearIndex();
      break;
    default:
      console.log('üìö Pinecone Admin Tool');
      console.log('\nAvailable commands:');
      console.log('  migrate    - Migrate all data from local DB to Pinecone');
      console.log('  stats      - Show index statistics');
      console.log('  sample     - Add sample data');
      console.log('  search     - Test search functionality');
      console.log('  list       - List items by category');
      console.log('  clear      - Clear all data (use with caution!)');
      console.log('\nExample:');
      console.log('  node pineconeAdmin.js search "ÌïôÍµê Ïó≠ÏÇ¨"');
  }
  
  process.exit(0);
}

main().catch(console.error);